##3회차 과제

-정리 주제: 함수 표현법(화살표 함수), 배열 관련 함수, 배열을 객체로, 객체를 배열로 만드는 방법

### 1.함수 표현법(화살표 함수)

->함수 표현 방법 중 화살표 함수는 처음 알게 되어 선정해보았습니다.
 아래와 같이 화살표 함수의 기본문법을 정리해보았습니다.

// 매개변수가 없는 경우
var foo = () => console.log('bar');
foo(); // bar

// 매개변수가 하나인 경우
var foo = x => x;
foo('bar'); // bar

// 매개변수가 여려개인 경우
var foo = (a, b) => a + b; // 간단하게 한줄로 표현할 땐 "{}" 없이 값이 반환됩니다.
foo(1, 2); // 3

var foo = (a, b) => { return a + b }; 
foo(1, 2); // 3

var foo = (a, b) => { a + b }; // "{}"를 사용했는데 return이 없을 때 
foo(1, 2); // undefined

var foo = (a, b) => { // 여러줄 썼을 때
	var c = 3;
	return a + b + c;
}
foo(1, 2, 3) // 6
/*
"{}"를 사용하면 값을 반환할 때 return을 사용해야합니다.
"{}"를 사용하지 않으면 undefied를 반환합니다.
"{}"을 사용할 때는 여러줄을 썼을 때 사용합니다.
*/

// 객체를 반환할 때
var foo = () => ( { a: 1, b: 2, c: 3 } );
foo(); // { a: 1, b: 2, c: 3 };

또, 일반 함수가 전역 컨텍스트에서 실행될 때 this가 정의 하는 것과 달리 화살표 함수는 this를 정의하지 않습니다. 

### 2. 배열 관련 함수

아래와 같은 다양한 배열 관련 함수에 대해서 추가적으로 정리해보았습니다.

(1) map()
-> 배열의 모든 요소에 어떤 작업을 하고 싶을 떄 사용합니다.

(2) filter()
-> 조건에 맞는 요소만 추출하고 싶을 떄 사용합니다.

(3) some()
-> 배열에 하나라도 조건을 만족하는게 있는지 확인할 때 사용합니다.

(4) push()
-> 배열 끝에 추가합니다.

(5) pop()
-> 배열 끝 요소를 제거합니다.

(6) unshift()
-> 배열 앞에서 추가합니다.

(7) shift()
-> 배열 앞에서 제거합니다.

(8) splice
-> arr.splice(n, m) //특정 요소 지움 n부터 m개
-> arr.splice(n, m, x): 특정 요소 지우고 x추가

(9) slice
-> arr.slice(n, m) //n부터 m까지 반환

(10) concat
-> arr.concat(arr2, arr3 ..) : 합쳐서 새배열 반환

(11) forEach
-> rr.forEach(fn): 함수를 인수로 받고 배열 반복

(12) indexOf / lastIndexOf
-> arr.indexOf : 배열 인덱스에 해당하는 값 반환
-> arr.lastIndexOf : 배열 끝에서부터 역순 탐색

(13) includes
-> arr.includes(): 포함하는 지 여부 확인 (true or false 반환)

(14) find / findIndex
-> arr.find(fn), arr.findIndex(fn)
    =>함수 사용가능.

(15) reverse
-> arr.reverse(): 역순으로 재정렬
    => 최근 가입된 유저 먼저 보여주거나, 게시판 최근 순 정렬

(16) join
-> arr.join(): 배열의 모든 요소를 연결해 하나의 문자열로 만듭니다.

(17) isArray 
-> arr.isArray() 배열여부 판별

### 3. 배열을 객체로, 객체를 배열로 만드는 방법

-> 배열을 객체로, 객체를 배열로 만드는 방법에 대해 더 찾아보았습니다.

(배열을 객체로 만드는 방법)
<1> Array.prototype.reduce()를 이용한 방법
  (ex) const arr = [1, 2, 3];
      const obj = arr.reduce((acc, val, index) => {
          acc[index] = val;
          return acc;
      }, {});
      console.log(obj);  // { '0': 1, '1': 2, '2': 3 }

<2> Object.assign()를 이용한 방법
  (ex) const arr = [1, 2, 3];
      const obj = Object.assign({}, arr);
      //배열의 경우 key값으로 인덱스를 사용한다.
      console.log(obj);  // { '0': 1, '1': 2, '2': 3 }

<3> 전개 연산자를 이용한 방법
  (ex) const arr = [1, 2, 3];
      const obj = { ...arr };
      console.log(obj); // { '0': 1, '1': 2, '2': 3 }

(객체를 배열로 만드는 방법)
<1> Object.key()와 Array.prototype.map()을 이용한 방법
  (ex) const obj = { '0': 1, '1': 2, '2': 3 };
      const arr = Object.keys(obj).map(key => obj[key]);
      console.log(arr);  // [1, 2, 3]

<2> 전개연산자를 이용한 방법
  (ex) const obj = { a: 1, b: 2, c: 3 };
      const arr = [...Object.values(obj)];
      console.log(arr); // [1, 2, 3]